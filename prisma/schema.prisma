// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? // Adding these as they are common in NextAuth adapters
  oauth_token        String? // Adding these as they are common in NextAuth adapters

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // Adding index for performance
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Adding index for performance
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String? // Added for storing hashed password
  accounts      Account[]
  sessions      Session[]
  organizations UserOnOrg[] // Relation to Organization through UserOnOrg
  forms         Form[] // User's created forms
  submissions   Submission[] // User's submitted forms (if tracking submissions by logged-in user)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id    String      @id @default(cuid())
  name  String
  users UserOnOrg[] // Relation to User through UserOnOrg
  forms Form[]      // Inverse relation: An organization can have multiple forms
}

// Join table for User and Organization with Role
model UserOnOrg {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  role           Role // Role of the user in the organization

  assignedAt DateTime @default(now()) // Optional: when the role was assigned
  assignedBy String? // Optional: who assigned the role (e.g., another userId)

  @@id([userId, organizationId])
  @@index([organizationId]) // Adding index for performance
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

model Form {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String    // Creator of the form
  user        User      @relation(fields: [userId], references: [id])
  
  organizationId String    // Each form belongs to an organization
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  version     Int       @default(1)

  fields      FormField[]
  submissions Submission[]

  @@index([userId])
  @@index([organizationId]) // Index for faster lookups by organizationId
}

model FormField {
  id        String   @id @default(cuid())
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  order     Int // To maintain field order in the form
  options   Json // Stores label, type, validation, placeholder, selectOptions etc.
  // Example options structure:
  // {
  //   "label": "Email Address",
  //   "fieldType": "email", // 'text', 'textarea', 'select', 'checkbox', 'radio', 'date', 'number'
  //   "required": true,
  //   "placeholder": "you@example.com",
  //   "selectOptions": ["Option 1", "Option 2"], // for type 'select', 'radio', 'checkbox_group'
  //   "validationRegex": "^\\S+@\\S+\\.\\S+$",
  //   "validationMessage": "Please enter a valid email.",
  //   "minLength": 5,
  //   "maxLength": 100
  // }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissionFields SubmissionField[] // If you want to directly link submission data back to the field definition it came from

  @@index([formId])
}

model Submission {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
  userId      String? // Optional: if submitted by a logged-in user
  user        User?    @relation(fields: [userId], references: [id])

  data SubmissionField[]

  @@index([formId])
  @@index([userId])
}

model SubmissionField {
  id           String     @id @default(cuid())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  formFieldId  String // Original FormField this data corresponds to
  formField    FormField  @relation(fields: [formFieldId], references: [id], onDelete: Restrict) // Prevent deletion of FormField if it has submission data
  value        String // Store actual submitted value. Consider Json if values can be complex (e.g. multiple selections for checkboxes)
  createdAt    DateTime   @default(now())

  @@index([submissionId])
  @@index([formFieldId])
}
